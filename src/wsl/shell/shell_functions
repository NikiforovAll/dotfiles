
#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Delete files that match a certain pattern from the current directory.
delete-files() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get gzip information (gzipped file size + reduction size).
gz() {
    declare -i gzippedSize=0
    declare -i originalSize=0

    if [ -f "$1" ]; then
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1" )
            printf "\n original size:   %12s\n" "$(hrfs "$originalSize")"

            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs "$gzippedSize")"

            printf " ─────────────────────────────\n"
            printf " reduction:       %12s [%s%%]\n\n" \
                        "$( hrfs $((originalSize - gzippedSize)) )" \
                        "$( printf "%s" "$originalSize $gzippedSize" | \
                            awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                            sed -e "s/0*$//;s/\.$//" )"
                            #              └─ remove tailing zeros

        else
            printf "\"%s\" is empty.\n" "$1"
        fi
    else
        printf "\"%s\" is not a file.\n" "$1"
    fi
}
# Create data URI from a file.
datauri() {

    local mimeType=""

    if [ -f "$1" ]; then
        mimeType=$(file -b --mime-type "$1")
        #                └─ do not prepend the filename to the output

        if [[ $mimeType == text/* ]]; then
            mimeType="$mimeType;charset=utf-8"
        fi

        printf "data:%s;base64,%s" \
                    "$mimeType" \
                    "$(openssl base64 -in "$1" | tr -d "\n")"
    else
        printf "%s is not a file.\n" "$1"
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Human readable file size
# (because `du -h` doesn't cut it for me).

hrfs() {

    printf "%s" "$1" |
    awk '{
            i = 1;
            split("B KB MB GB TB PB EB ZB YB WTFB", v);
            value = $1;
            # confirm that the input is a number
            if ( value + .0 == value ) {
                while ( value >= 1024 ) {
                    value/=1024;
                    i++;
                }
                if ( value == int(value) ) {
                    printf "%d %s", value, v[i]
                } else {
                    printf "%.1f %s", value, v[i]
                }
            }
        }' |
    sed -e ":l" \
        -e "s/\([0-9]\)\([0-9]\{3\}\)/\1,\2/; t l"
    #    └─ add thousands separator
    #       (changes "1023.2 KB" to "1,023.2 KB")
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create new directories and enter the first one.
mkd() {
    if [ -n "$*" ]; then

        mkdir -p "$@"
        #      └─ make parent directories if needed

        cd "$@" || exit 1

    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Search history.
qh() {
    #           ┌─ enable colors for pipe
    #           │  ("--color=auto" enables colors only if
    #           │  the output is in the terminal)
    grep --color=always "$*" "$HISTFILE" |       less -RX
    # display ANSI color escape sequences in raw form ─┘│
    #       don't clear the screen after quitting less ─┘
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Search for text within the current directory.
qt() {
    grep -ir --color=always "$*" --exclude-dir=".git" --exclude-dir="node_modules" . | less -RX
    #     │└─ search all files under each directory, recursively
    #     └─ ignore case
}

# list_shell_aliases () {
#     alias
# }

list_shell_functions () {
    while test $# != 0
    do
        case "$1" in
        -v) declare -f;;
        esac
        shift
    done
    if [[ $# -eq 0 ]]; then
        declare -F;
    fi

}

function openBrowser() {
  URL=$1
  OS=$(uname -s)
  case "$OS" in
      Darwin)
          open "$URL"
          ;;
      Linux)
          if [[ "$(cat /proc/sys/kernel/osrelease)" =~ "Microsoft" ]]; then
              # We are in bash on WSL (Windows Subsystem for Linux)
              # We don't need a Linux-Browser and an X-Server,
              # we just can call iexplore.exe,
              # see also https://msdn.microsoft.com/en-us/commandline/wsl/interop
              if [[ "(uname -p)" == "x86_64" ]]; then
              'C:\Program\ Files\ (x86)\Google\Chrome\Application'
                  '/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe' "$URL" 2> /dev/null
              else
                  '/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe' "$URL" 2> /dev/null
              fi
          else
              xdg-open "$URL"
          fi
          ;;
      Solaris)
          /usr/dt/bin/sdtwebclient "$URL"
          ;;
      *)
          printf "Not supported on %s\n" "$OS"
          ;;
  esac
}

# github pull request
ghpr() {
  if [ $? -eq 0 ]; then
    github_url=`git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#http://#' -e 's@com:@com/@' -e 's%\.git$%%'`;
    branch_name=`git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3`;
    pr_url=$github_url"/compare/master..."$branch_name
    openBrowser $pr_url;
  else
    echo 'failed to open a pull request.';
  fi
}

# alias evernote="python -mwebbrowser 'https://www.evernote.com/client/web?login=true' &2>/dev/null"
# alias evernote="openBrowser 'https://www.evernote.com/client/web?login=true'"
evernote() {
    BASE_URL='https://www.evernote.com/client/web?login=true'
    #do things with parameters like $1 such as
    if [ -z "$1" ]; then
        openBrowser $BASE_URL
    else
        openBrowser "$BASE_URL#?&query=$(echo $@ | urlencode_json)"
    fi
}

function gitstash() {
    git stash push -m "zsh_stash_name_$1"
}

function gitstashapply() {
    git stash apply $(git stash list | grep "zsh_stash_name_$1" | cut -d: -f1)
}
